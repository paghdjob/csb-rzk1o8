{"version":3,"sources":["store/multiFormStore.js","App.js","reportWebVitals.js","store/formStore.js","store/store.js","index.js"],"names":["multiFormStoreReducer","createSlice","name","initialState","multiForm","formName","reducers","incrementByAmounts","state","action","merged","formObj","payload","field","value","Object","_tmp_deploys_rzk1o8_cl6i3qktk133h0us8b2a9cdtf_source_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_tmp_deploys_rzk1o8_cl6i3qktk133h0us8b2a9cdtf_source_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","actions","Loading","lazy","__webpack_require__","e","then","bind","AppRouting","App","react_default","a","createElement","Fragment","react_router_dom","react","fallback","react_router","path","element","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","formStoreReducer","increment","decrement","incrementByAmount","console","log","p","username","store","configureStore","reducer","counter","ReactDOM","createRoot","document","getElementById","render","StrictMode","es","src_App"],"mappings":"mJAQaA,EAAwBC,YAAY,CAC/CC,KAAM,YACNC,aARmB,CACnBC,UAAW,CACTC,SAAU,aAOZC,SAAU,CACRC,mBAAoB,SAACC,EAAOC,GAC1B,IAAIC,EAAS,GACTC,EAAU,GAGZH,EAAMJ,WACNI,EAAMJ,UAAUK,EAAOG,QAAQP,WAC/BG,EAAMJ,UAAUK,EAAOG,QAAQP,UAAUI,EAAOG,QAAQC,QAExDH,EAASF,EAAMJ,UAAUK,EAAOG,QAAQP,UACtCI,EAAOG,QAAQC,OACbJ,EAAOG,QAAQE,MAEnBN,EAAMJ,UAANW,OAAAC,EAAA,EAAAD,CAAA,GAAuBP,EAAMJ,UAAcM,IAClCF,EAAMJ,WAAaI,EAAMJ,UAAUK,EAAOG,QAAQP,WAE3DK,EAASF,EAAMJ,UAAUK,EAAOG,QAAQP,UACtCI,EAAOG,QAAQC,OACbJ,EAAOG,QAAQE,MACnBN,EAAMJ,UAANW,OAAAC,EAAA,EAAAD,CAAA,GAAuBP,EAAMJ,UAAcM,KAG3CC,EAAOI,OAAAE,EAAA,EAAAF,CAAA,GACJN,EAAOG,QAAQP,SADXU,OAAAE,EAAA,EAAAF,CAAA,GAEFN,EAAOG,QAAQC,MAAQJ,EAAOG,QAAQE,QAG3CJ,EAAMK,OAAAC,EAAA,EAAAD,CAAA,GAAQP,EAAMJ,UAAcO,GAClCH,EAAMJ,UAAYM,OAKXH,EAAuBP,EAAsBkB,QAA7CX,mBAEAP,MAAf,2KC7CMmB,EAAUC,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACrBC,EAAaL,eAAK,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,YAgBfE,MAdf,WACE,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,SAAD,CAAUC,SAAUN,EAAAC,EAAAC,cAACV,EAAD,OAClBQ,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,IAAIC,QAAST,EAAAC,EAAAC,cAACJ,EAAD,aCCtBY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxClB,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAiB,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,aCDDQ,EAAmB7C,YAAY,CAC1CC,KAAM,UACNC,aANmB,CACnBW,MAAO,UAMPR,SAAU,CACRyC,UAAW,SAACvC,EAAOC,GACjBD,EAAMM,OAAS,GAEjBkC,UAAW,SAACxC,EAAOC,GACjBD,EAAMM,OAAS,GAEjBmC,kBAAmB,SAACzC,EAAOC,GACvByC,QAAQC,IAAI,uBAAuB3C,EAAOC,EAAOG,SACjD,IAAMwC,EAAI3C,EAAOG,QAAQyC,SAC3B7C,EAAMM,MAAQsC,QAOlBN,EAAiB5B,QAEJ4B,KAHAC,YAAWC,YAAWC,kBAGtBH,EAAf,iBCxBaQ,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASX,EACT1C,UAAWJ,eCEF0D,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHnC,EAAAC,EAAAC,cAACF,EAAAC,EAAMmC,WAAP,KACEpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAUV,MAAOA,GACf3B,EAAAC,EAAAC,cAACoC,EAAD,SAQN5B","file":"static/js/main.08cbc15b.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  multiForm: {\r\n    formName: \"testform\",\r\n  },\r\n};\r\n\r\nexport const multiFormStoreReducer = createSlice({\r\n  name: \"multiForm\",\r\n  initialState,\r\n  reducers: {\r\n    incrementByAmounts: (state, action) => {\r\n      let merged = {};\r\n      let formObj = {};\r\n\r\n      if (\r\n        state.multiForm &&\r\n        state.multiForm[action.payload.formName] &&\r\n        state.multiForm[action.payload.formName][action.payload.field]\r\n      ) {\r\n        merged = state.multiForm[action.payload.formName][\r\n          action.payload.field\r\n        ] = action.payload.value;\r\n        // console.log(\"new field and value adding  -->\", merged)\r\n        state.multiForm = { ...state.multiForm, ...merged };\r\n      } else if (state.multiForm && state.multiForm[action.payload.formName]) {\r\n        // console.log(\"new form and field  value adding  -->\", action.payload.value)\r\n        merged = state.multiForm[action.payload.formName][\r\n          action.payload.field\r\n        ] = action.payload.value;\r\n        state.multiForm = { ...state.multiForm, ...merged };\r\n      } else {\r\n        // console.log(\"new form adding  -->\", action.payload.formName)\r\n        formObj = {\r\n          [action.payload.formName]: {\r\n            [action.payload.field]: action.payload.value,\r\n          },\r\n        };\r\n        merged = { ...state.multiForm, ...formObj };\r\n        state.multiForm = merged;\r\n      }\r\n    },\r\n  },\r\n});\r\nexport const { incrementByAmounts } = multiFormStoreReducer.actions;\r\n\r\nexport default multiFormStoreReducer.reducer;\r\n","import React, { Suspense, lazy } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nconst Loading = lazy(() => import(\"./component/loading\"));\nconst AppRouting = lazy(() => import(\"./routing/index\"));\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <BrowserRouter>\n        <Suspense fallback={<Loading />}>\n          <Routes>\n            <Route path=\"*\" element={<AppRouting />} />\n          </Routes>\n        </Suspense>\n      </BrowserRouter>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  value: 'yogesh',\r\n};\r\n\r\nexport const formStoreReducer = createSlice({\r\n  name: \"counter\",\r\n  initialState,\r\n  reducers: {\r\n    increment: (state, action) => {\r\n      state.value += 1;\r\n    },\r\n    decrement: (state, action) => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n        console.log('incrementByAmount---',state, action.payload)\r\n        const p = action.payload.username;\r\n      state.value = p;\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } =\r\n  formStoreReducer.actions;\r\n\r\nexport default formStoreReducer.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport formStoreReducer from \"./formStore\";\r\nimport multiFormStoreReducer from './multiFormStore'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: formStoreReducer,\r\n    multiForm: multiFormStoreReducer\r\n  },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}